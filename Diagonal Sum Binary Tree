'''

Given the root of a binary tree, return the sum of all nodes for each diagonal having negative slope `\`. Assume that the left and right child of a node makes a 45â€“degree angle with the parent.

Input:
				 1
			 .		 .
		   .		   .
		 2				 3
	   .			   .	.
	 .				 .		  .
   4			   5			6
				 .   .
			   .	   .
			 7			 8

Output: [10, 15, 11]

Explanation: The binary tree has three diagonals - [1, 3, 6], [2, 5, 8], and [4, 7]. The sum of diagonals is 10, 15, and 11 respectively.

'''

class Solution:
	def findDiagonalSum(self, root: Node) -> List[int]:
		def traversal(root):
			if root==None:
				return []
				
			hd=0
			q=[[root,hd]]
			
			dict1=dict()
			
			while q!=[]:
				node=q.pop(0)
				
				if node[1] not in dict1:
					dict1[node[1]]=[node[0].data]
				else:
					dict1[node[1]].append(node[0].data)
					
				hd=node[1]
				
				if node[0].left:
					q.append([node[0].left,hd+1])
					
				if node[0].right:
					q.append([node[0].right,hd])
					
			list1=sorted(dict1.items(),key=lambda x:x[0])
			list1=[sum(i[1]) for i in list1]
			
			return list1
		return traversal(root)
